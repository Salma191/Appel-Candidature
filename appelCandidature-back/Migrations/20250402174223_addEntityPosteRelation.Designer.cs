// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pfe_back.Data;

#nullable disable

namespace pfe_back.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250402174223_addEntityPosteRelation")]
    partial class addEntityPosteRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DecisionPoste", b =>
                {
                    b.Property<int>("DecisionId")
                        .HasColumnType("int");

                    b.Property<int>("PosteId")
                        .HasColumnType("int");

                    b.HasKey("DecisionId", "PosteId");

                    b.HasIndex("PosteId");

                    b.ToTable("DecisionPoste");
                });

            modelBuilder.Entity("PVPoste", b =>
                {
                    b.Property<int>("PVId")
                        .HasColumnType("int");

                    b.Property<int>("PosteId")
                        .HasColumnType("int");

                    b.HasKey("PVId", "PosteId");

                    b.HasIndex("PosteId");

                    b.ToTable("PVPoste");
                });

            modelBuilder.Entity("pfe_back.Models.Candidat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectationActuelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Catégorie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Congé")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Consentement")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateRetraite")
                        .HasColumnType("datetime2");

                    b.Property<int>("JoursAbsence")
                        .HasColumnType("int");

                    b.Property<string>("NoteTroisDernieresAnnees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosteOccupe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sanction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId")
                        .IsUnique();

                    b.ToTable("Candidats");
                });

            modelBuilder.Entity("pfe_back.Models.Candidature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePostulation")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumeroEnregistrement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PosteId")
                        .HasColumnType("int");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidatId");

                    b.HasIndex("PosteId");

                    b.ToTable("Candidatures");
                });

            modelBuilder.Entity("pfe_back.Models.Commission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("pfe_back.Models.Decision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLimite")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePublication")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSignature")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntiteId")
                        .HasColumnType("int");

                    b.Property<int>("NbreMaxPosteCandidat")
                        .HasColumnType("int");

                    b.Property<int>("PVId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Statut")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntiteId");

                    b.HasIndex("PVId")
                        .IsUnique();

                    b.ToTable("Decision");
                });

            modelBuilder.Entity("pfe_back.Models.DecisionPhase", b =>
                {
                    b.Property<int>("DecisionId")
                        .HasColumnType("int");

                    b.Property<int>("PhaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Statut")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DecisionId", "PhaseId");

                    b.HasIndex("PhaseId");

                    b.ToTable("DecisionPhases");
                });

            modelBuilder.Entity("pfe_back.Models.Diplome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnéeObtention")
                        .HasColumnType("int");

                    b.Property<int>("CandidatId")
                        .HasColumnType("int");

                    b.Property<string>("Etablissement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intitulé")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Niveau")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidatId");

                    b.ToTable("Diplomes");
                });

            modelBuilder.Entity("pfe_back.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidatureId")
                        .HasColumnType("int");

                    b.Property<string>("Lien")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidatureId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("pfe_back.Models.Entite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EntiteId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntiteId");

                    b.ToTable("Entites");
                });

            modelBuilder.Entity("pfe_back.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDébut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entreprise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poste")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidatId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("pfe_back.Models.MembreCommission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleCommission")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionId");

                    b.HasIndex("UtilisateurId")
                        .IsUnique();

                    b.HasIndex("UtilisateurId", "CommissionId")
                        .IsUnique();

                    b.ToTable("MembreCommissions");
                });

            modelBuilder.Entity("pfe_back.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidatureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnvoi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidatureId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("pfe_back.Models.PV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntiteId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Statut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypePosteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionId");

                    b.HasIndex("EntiteId");

                    b.HasIndex("TypePosteId");

                    b.ToTable("PV");
                });

            modelBuilder.Entity("pfe_back.Models.Phase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Nom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("pfe_back.Models.PieceJointe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Fichier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFromPV")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PVId")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DecisionId");

                    b.HasIndex("PVId");

                    b.ToTable("PieceJointes");
                });

            modelBuilder.Entity("pfe_back.Models.Poste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Critere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePublication")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntiteId")
                        .HasColumnType("int");

                    b.Property<string>("Exigence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroUnique")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypePosteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntiteId");

                    b.HasIndex("TypePosteId");

                    b.ToTable("Poste");
                });

            modelBuilder.Entity("pfe_back.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "Administrateur"
                        },
                        new
                        {
                            Id = 2,
                            Nom = "DAO"
                        },
                        new
                        {
                            Id = 3,
                            Nom = "Candidat"
                        },
                        new
                        {
                            Id = 4,
                            Nom = "MembreCommission"
                        });
                });

            modelBuilder.Entity("pfe_back.Models.TypePoste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypePostes", (string)null);
                });

            modelBuilder.Entity("pfe_back.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("DecisionPoste", b =>
                {
                    b.HasOne("pfe_back.Models.Decision", null)
                        .WithMany()
                        .HasForeignKey("DecisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("pfe_back.Models.Poste", null)
                        .WithMany()
                        .HasForeignKey("PosteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PVPoste", b =>
                {
                    b.HasOne("pfe_back.Models.PV", null)
                        .WithMany()
                        .HasForeignKey("PVId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("pfe_back.Models.Poste", null)
                        .WithMany()
                        .HasForeignKey("PosteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("pfe_back.Models.Candidat", b =>
                {
                    b.HasOne("pfe_back.Models.Utilisateur", "Utilisateur")
                        .WithOne("Candidat")
                        .HasForeignKey("pfe_back.Models.Candidat", "UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("pfe_back.Models.Candidature", b =>
                {
                    b.HasOne("pfe_back.Models.Candidat", "Candidat")
                        .WithMany("Candidatures")
                        .HasForeignKey("CandidatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pfe_back.Models.Poste", "Poste")
                        .WithMany("Candidatures")
                        .HasForeignKey("PosteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidat");

                    b.Navigation("Poste");
                });

            modelBuilder.Entity("pfe_back.Models.Decision", b =>
                {
                    b.HasOne("pfe_back.Models.Entite", "Entite")
                        .WithMany("Decisions")
                        .HasForeignKey("EntiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pfe_back.Models.PV", "PV")
                        .WithOne("Decision")
                        .HasForeignKey("pfe_back.Models.Decision", "PVId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entite");

                    b.Navigation("PV");
                });

            modelBuilder.Entity("pfe_back.Models.DecisionPhase", b =>
                {
                    b.HasOne("pfe_back.Models.Decision", "Decision")
                        .WithMany("DecisionPhases")
                        .HasForeignKey("DecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pfe_back.Models.Phase", "Phase")
                        .WithMany("DecisionPhases")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Decision");

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("pfe_back.Models.Diplome", b =>
                {
                    b.HasOne("pfe_back.Models.Candidat", "Candidat")
                        .WithMany("Diplomes")
                        .HasForeignKey("CandidatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidat");
                });

            modelBuilder.Entity("pfe_back.Models.Document", b =>
                {
                    b.HasOne("pfe_back.Models.Candidature", "Candidature")
                        .WithMany("Documents")
                        .HasForeignKey("CandidatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidature");
                });

            modelBuilder.Entity("pfe_back.Models.Entite", b =>
                {
                    b.HasOne("pfe_back.Models.Entite", null)
                        .WithMany("Entites")
                        .HasForeignKey("EntiteId");
                });

            modelBuilder.Entity("pfe_back.Models.Experience", b =>
                {
                    b.HasOne("pfe_back.Models.Candidat", "Candidat")
                        .WithMany("Experiences")
                        .HasForeignKey("CandidatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidat");
                });

            modelBuilder.Entity("pfe_back.Models.MembreCommission", b =>
                {
                    b.HasOne("pfe_back.Models.Commission", "Commission")
                        .WithMany("MembreCommissions")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pfe_back.Models.Utilisateur", "Utilisateur")
                        .WithOne("MembreCommission")
                        .HasForeignKey("pfe_back.Models.MembreCommission", "UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commission");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("pfe_back.Models.Notification", b =>
                {
                    b.HasOne("pfe_back.Models.Candidature", "Candidature")
                        .WithMany("Notifications")
                        .HasForeignKey("CandidatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidature");
                });

            modelBuilder.Entity("pfe_back.Models.PV", b =>
                {
                    b.HasOne("pfe_back.Models.Commission", "Commission")
                        .WithMany("PVs")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pfe_back.Models.Entite", "Entite")
                        .WithMany("PVs")
                        .HasForeignKey("EntiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pfe_back.Models.TypePoste", "TypePoste")
                        .WithMany()
                        .HasForeignKey("TypePosteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commission");

                    b.Navigation("Entite");

                    b.Navigation("TypePoste");
                });

            modelBuilder.Entity("pfe_back.Models.PieceJointe", b =>
                {
                    b.HasOne("pfe_back.Models.Decision", "Decision")
                        .WithMany("PieceJointes")
                        .HasForeignKey("DecisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("pfe_back.Models.PV", "PV")
                        .WithMany("PieceJointes")
                        .HasForeignKey("PVId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Decision");

                    b.Navigation("PV");
                });

            modelBuilder.Entity("pfe_back.Models.Poste", b =>
                {
                    b.HasOne("pfe_back.Models.Entite", "Entite")
                        .WithMany()
                        .HasForeignKey("EntiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pfe_back.Models.TypePoste", "TypePoste")
                        .WithMany("Postes")
                        .HasForeignKey("TypePosteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entite");

                    b.Navigation("TypePoste");
                });

            modelBuilder.Entity("pfe_back.Models.Utilisateur", b =>
                {
                    b.HasOne("pfe_back.Models.Role", "Role")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("pfe_back.Models.Candidat", b =>
                {
                    b.Navigation("Candidatures");

                    b.Navigation("Diplomes");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("pfe_back.Models.Candidature", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("pfe_back.Models.Commission", b =>
                {
                    b.Navigation("MembreCommissions");

                    b.Navigation("PVs");
                });

            modelBuilder.Entity("pfe_back.Models.Decision", b =>
                {
                    b.Navigation("DecisionPhases");

                    b.Navigation("PieceJointes");
                });

            modelBuilder.Entity("pfe_back.Models.Entite", b =>
                {
                    b.Navigation("Decisions");

                    b.Navigation("Entites");

                    b.Navigation("PVs");
                });

            modelBuilder.Entity("pfe_back.Models.PV", b =>
                {
                    b.Navigation("Decision");

                    b.Navigation("PieceJointes");
                });

            modelBuilder.Entity("pfe_back.Models.Phase", b =>
                {
                    b.Navigation("DecisionPhases");
                });

            modelBuilder.Entity("pfe_back.Models.Poste", b =>
                {
                    b.Navigation("Candidatures");
                });

            modelBuilder.Entity("pfe_back.Models.Role", b =>
                {
                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("pfe_back.Models.TypePoste", b =>
                {
                    b.Navigation("Postes");
                });

            modelBuilder.Entity("pfe_back.Models.Utilisateur", b =>
                {
                    b.Navigation("Candidat");

                    b.Navigation("MembreCommission");
                });
#pragma warning restore 612, 618
        }
    }
}
